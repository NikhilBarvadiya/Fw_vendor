import 'package:flutter/foundation.dart';import 'package:fw_vendor/common/config.dart';import 'package:fw_vendor/core/configuration/app_routes.dart';import 'package:fw_vendor/core/utilities/index.dart';import 'package:fw_vendor/networking/index.dart';import 'package:get/get.dart';import 'package:package_info_plus/package_info_plus.dart';class SplashController extends GetxController {  @override  void onReady() {    _getAppVersion();    super.onReady();  }  String? appVersion;  Future _getAppVersion() async {    PackageInfo packageInfo = await PackageInfo.fromPlatform();    appVersion = packageInfo.version;    update();    try {      var request = {};      var response = await apis.call(        apiMethods.appVersions,        request,        ApiType.post,      );      if (response.isSuccess == true && response.data != null) {        _verifyVersion(response.data, packageInfo);      }    } catch (err) {      if (kDebugMode) {        print(err);      }    }  }  _verifyVersion(String sBuild, PackageInfo packageInfo) {    int serverBuild = int.parse(sBuild);    int appBuild = int.parse(packageInfo.buildNumber.toString());    if (serverBuild > appBuild) {      Get.toNamed(AppRoutes.appUpdate);    } else {      Future.delayed(const Duration(seconds: 2), () async {        var userData = await getStorage(Session.userData);        if (userData != null && userData != 0) {          if (userData["userType"] == "vendor") {            Get.toNamed(AppRoutes.home);          } else {            Get.toNamed(AppRoutes.employeHome);          }        } else {          Get.toNamed(AppRoutes.login);        }      });    }  }}