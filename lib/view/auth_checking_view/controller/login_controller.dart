import 'package:flutter/material.dart';import 'package:fw_vendor/common/config.dart';import 'package:fw_vendor/core/configuration/app_routes.dart';import 'package:fw_vendor/core/utilities/index.dart';import 'package:fw_vendor/networking/index.dart';import 'package:get/get.dart';class LoginController extends GetxController {  TextEditingController txtEmailController = TextEditingController();  TextEditingController txtPasswordController = TextEditingController();  final TextEditingController txtMobileNumber = TextEditingController();  final focusMobileNumber = FocusNode();  final focusEmailNumber = FocusNode();  final focusPasswordNumber = FocusNode();  final formKey = GlobalKey<FormState>();  bool isLoading = false;  bool isEmploye = true;  bool isVendor = false;  @override  void onReady() {    _screenFocus();    super.onReady();  }  _screenFocus() {    focusMobileNumber.unfocus();    focusEmailNumber.unfocus();    focusPasswordNumber.unfocus();    txtMobileNumber.text = "";    txtEmailController.text = "";    txtPasswordController.text = "";    update();  }  vendorLogin(v) {    _screenFocus();    if (isVendor == false) {      isVendor = v;    }    isEmploye = false;    update();  }  employeLogin(v) {    _screenFocus();    if (isEmploye == false) {      isEmploye = v;    }    isVendor = false;    update();  }  void onVendorLogin() async {    try {      focusEmailNumber.unfocus();      focusPasswordNumber.unfocus();      isLoading = true;      update();      var request = {        "emailId": txtEmailController.text,        "password": txtPasswordController.text,        "loginWith": "emailId",      };      var resData = await apis.call(        apiMethods.login,        request,        ApiType.post,      );      if (resData.isSuccess == true && resData.data != 0) {        writeStorage(Session.userData, resData.data[0]);        writeStorage(Session.authToken, resData.data[0]['accessToken']);        Get.toNamed(AppRoutes.home);      } else {        errorDialog("Please try again ?");      }    } catch (e) {      throw Exception("Failed to load users");    }    isLoading = false;    update();  }  void onEmployeeLogin() async {    try {      focusMobileNumber.unfocus();      isLoading = true;      update();      var request = {        "mobile": txtMobileNumber.text,      };      var resData = await apis.call(        apiMethods.employeLogin,        request,        ApiType.post,      );      if (resData.isSuccess == true && resData.data != 0) {        await writeStorage(Session.employeUserData, resData.data);        await writeStorage(Session.employeAuthToken, resData.data['token']);        Get.toNamed(AppRoutes.employeHome);      } else {        errorDialog("Please try again ?");      }    } catch (e) {      throw Exception("Failed to load users");    }    isLoading = false;    update();  }}