import 'package:flutter/material.dart';import 'package:fw_vendor/common/config.dart';import 'package:fw_vendor/core/configuration/app_routes.dart';import 'package:fw_vendor/core/utilities/index.dart';import 'package:fw_vendor/networking/index.dart';import 'package:get/get.dart';class LoginController extends GetxController {  TextEditingController txtEmailController = TextEditingController();  TextEditingController txtPasswordController = TextEditingController();  final TextEditingController txtMobileNumber = TextEditingController();  final focusMobileNumber = FocusNode();  final focusEmailNumber = FocusNode();  final focusPasswordNumber = FocusNode();  final formKey = GlobalKey<FormState>();  bool isLoading = false;  bool isEmploye = true;  bool isVendor = false;  bool isBottomSheet = false;  bool isTimer = false;  @override  void onReady() {    _screenFocus();    _timer();    super.onReady();  }  _timer() {    Future.delayed(const Duration(seconds: 3), () async {      isTimer = true;      update();    });  }  List loginAs = [];  List employeeLoginAs = [];  onLoginAsClick(selectedLoginData) async {    loginAs = await getStorage(Session.loginAs);    txtEmailController.text = selectedLoginData["emailId"].toString();    txtPasswordController.text = selectedLoginData["password"].toString();    update();    Get.back();  }  onEmployeeLoginAsClick(selectedLoginData) async {    employeeLoginAs = await getStorage(Session.employeeLoginAs);    txtMobileNumber.text = selectedLoginData["mobile"].toString();    update();    Get.back();  }  _screenFocus() {    focusMobileNumber.unfocus();    focusEmailNumber.unfocus();    focusPasswordNumber.unfocus();    txtMobileNumber.text = "";    txtEmailController.text = "";    txtPasswordController.text = "";    update();  }  vendorLogin(v) async {    isTimer = false;    update();    _screenFocus();    _timer();    if (isVendor == false) {      isVendor = v;      isBottomSheet = true;    }    isEmploye = false;    isBottomSheet = false;    update();  }  employeLogin(v) async {    isTimer = false;    update();    _screenFocus();    _timer();    if (isEmploye == false) {      isEmploye = v;      isBottomSheet = true;    }    isVendor = false;    isBottomSheet = false;    update();  }  void onVendorLogin() async {    try {      focusEmailNumber.unfocus();      focusPasswordNumber.unfocus();      isLoading = true;      update();      var request = {        "emailId": txtEmailController.text,        "password": txtPasswordController.text,        "loginWith": "emailId",      };      var resData = await apis.call(apiMethods.login, request, ApiType.post);      if (resData.isSuccess == true && resData.data != 0) {        List loginAsList = [];        var loginAs = await getStorage(Session.loginAs);        if (loginAs != null && loginAs != '' && loginAs.length > 0) {          loginAsList = loginAs;          int index = loginAsList.indexWhere((element) => (element['emailId'] == request['emailId']));          if (index != -1) {            loginAsList[index]['password'] = request['password'];          } else {            if (loginAsList.length < 5) {              loginAsList.add(request);            } else {              loginAsList.removeAt(0);              loginAsList.add(request);            }          }          await writeStorage(Session.loginAs, loginAsList);        } else {          List userCred = [request];          await writeStorage(Session.loginAs, userCred);        }        await writeStorage(Session.userData, resData.data[0]);        await writeStorage(Session.authToken, resData.data[0]['accessToken']);        Get.toNamed(AppRoutes.home);      } else {        errorDialog("Please try again ?", Colors.redAccent);      }    } catch (e) {      throw Exception("Failed to load users");    }    isLoading = false;    update();  }  void onEmployeeLogin() async {    try {      focusMobileNumber.unfocus();      isLoading = true;      update();      var request = {        "mobile": txtMobileNumber.text,      };      var resData = await apis.call(apiMethods.employeLogin, request, ApiType.post);      if (resData.isSuccess == true && resData.data != 0) {        List employeeLoginAs = [];        var loginAs = await getStorage(Session.employeeLoginAs);        if (loginAs != null && loginAs != '' && loginAs.length > 0) {          employeeLoginAs = loginAs;          int index = employeeLoginAs.indexWhere((element) => (element['mobile'] == request['mobile']));          if (index != -1) {            employeeLoginAs[index]['mobile'] = request['mobile'];          } else {            if (employeeLoginAs.length < 5) {              employeeLoginAs.add(request);            } else {              employeeLoginAs.removeAt(0);              employeeLoginAs.add(request);            }          }          await writeStorage(Session.employeeLoginAs, employeeLoginAs);        } else {          List userCred = [request];          await writeStorage(Session.employeeLoginAs, userCred);        }        await writeStorage(Session.employeUserData, resData.data);        await writeStorage(Session.employeAuthToken, resData.data['token']);        Get.toNamed(AppRoutes.employeHome);      } else {        errorDialog("Please try again ?", Colors.redAccent);      }    } catch (e) {      throw Exception("Failed to load users");    }    isLoading = false;    update();  }}